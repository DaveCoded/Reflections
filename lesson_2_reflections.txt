What happens when you initialize a repository? Why do you need to do it?

- Using 'git init' to initialize a repo adds a hidden .git file to the directory
- The 'git init' command also starts Git 'listening' to any changes made to files in this repo
- To see hidden files, use the '-a' flag, e.g. 'ls -a' will list all files / dirs in current dir

How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area allows us to choose which files to commit
- This is particularly useful when initializing a repo which already has files in it

How can you use the staging area to make sure you have one commit per logical change?

- Using 'git status' will show how many files have been added to the staging area before committing

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- Branches are useful for making big experimental changes that you may decide not to include in the master
- Other versions of the same application might live on different branches, eg. another language or
an easier version of the same game
- Branches allow us to use version control on these experiments without affecting the working app

How do the diagrams help you visualize the branch structure?

- Diagrams easily remind us what is reachable from where, and what our commits will be affecting

